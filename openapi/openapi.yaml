openapi: 3.0.0
info:
  version: 1.0.0
  title: Mostafa financial API
  description: a simpe financial and inventory managmenet for mostafa

servers:
  - url: localhost/api/v1

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    error:
      type: object
      properties:
        err:
          type: string
    message:
      type: object
      properties:
        msg:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        role:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
        creation_date:
          type: string
        author:
          $ref: "#/components/schemas/User"
        description:
          type: string
        brand:
          type: string
        author_id:
          type: UUID
    Inventory:
      type: object
      properties:
        id:
          type: integer
        item_id:
          type: integer
        quantity:
          type: Integer
        created_date:
          type: Date
        updated_date:
          type: Date
        warehouse_id:
          type: integer
        price_id:
          type: integer
    Price:
      type: object
      properties:
        id:
          type: integer
        price:
          type: float
        unit:
          type: string
        to_rial_ratio:
          type: float
    Order:
      type: object
      properties:
        id:
          type: integer
        order_date:
          type: Date
        order_quantity:
          type: integer
        provider:
          type: string
        item_id:
          type: integer
        warehouse_id:
          type: integer
        price_id:
          type: integer
    Transfer:
      type: object
      properties:
        id:
          type: integer
        origin_warehouse_id:
          type: integer
        dest_warehouse_id:
          type: integer
        transfer_price_id:
          type: integer
        transfer_date:
          type: Date
        recieved_date:
          type: Date
        price_id:
          type: integer
    Delivery:
      type: object
      properties:
        id:
          type: integer
        sales_date:
          type: Date
        quantity:
          type: integer
        delivery_date:
          type: Date
        customer_id:
          type: integer
        inventory_id:
          type: integer
        warehouse_id:
          type: integer
    Warehouse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
#----------------------------------------------------------------------------
paths: 
  /users:
    get:
      description: return a list of registered users with username and role
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  roel:
                    type: string
        '403':
          description: User is not authorized to access data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /users/signup:
    post:
      description: signup new users
      parameters:
        - name: email
          in: query
          description: user provided email
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          description: user provided password
          required: true
          schema:
            type: string
      responses:
        '201':
          description: user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '403':
          description: user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '422':
          description: email or password are not available or are not in needed format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /users/signin:
    post:
      description: signin user
      parameters:
        - name: email
          in: query
          description: user provided email
          required: true
          schema:
            type: string
            format: email
        - name: password
          in: query
          description: user provided password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user logedin successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '404':
          description: user was not found!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '403':
          description: username or password is wrong!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /users/current:
    get:
      security: 
        - BearerAuth: [user]
      description: get current user data
      responses:
        '200':
          description: user is loggedin
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '403':
          description: user is not loggedin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /users/refresh-token:
    post:
      security:
        - BearerAuth: [user]
      description: refresh expired token
      responses:
        '201':
          description: new token granted successcfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '403':
          description: token is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /users/profile:
    get:
      security:
        - BearerAuth: [user]
      description: get user profile data
      responses:
        '200':
          description: user is authenticated and data is provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  imageUrl:
                    type: string
                  createdItems:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
        '403':
          description: user is not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /inventory:
    get:
      security:
        - BearerAuth: [user]
      description: get all items that are available
      responses:
        '200':
          description: user is authorized to access data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    image:
                      type: string
                    quantity:
                      type: number
        '403':
          description: user is not authorized to access data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      security:
        - BearerAuth: [user]
      description: create new inventory item
      parameters:
        - in: query
          name: item
          required: true
          schema:
            $ref: "#/components/schemas/Item"
        - in: query
          name: price
          required: true
          schema:
            $ref: "#/components/schemas/Price"
        -in: query
        name: warehouse
        required: true
        schema:
          $ref: "#/components/schemas/Warehouse"
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '403':
          description: user is not authorized to create item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /inventory/{itemId}:
    get:
      security:
        - BearerAuth: [user]
      description: get details about item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
          description: ID of the inventory item
      responses:
        '200':
          description: user is authorized to access item data
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: '#/components/schemas/Item'
        '403':
          description: user is not authorized to acces this item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '404':
          description: Item was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      security:
        - BearerAuth: [user]
      description: Editing an inventory item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
          description: Id of item user wants to edit
        - in: query
          name: item
          required: true
          schema:
            $ref: '#/components/schemas/Item'
        - in: query
          name: price
          required: true
          schema:
            $ref: "#/components/schemas/Price"
      responses:
        '201':
          description: Item edited successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        '403':
          description: User is not authorized to edit item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      security:
        - BearerAuth: [user]
      description: Deleting an item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
          description: Id of item user wants to delete
      responses:
        '201':
          description: Item edited successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        '403':
          description: User is not authorized to edit item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /orders:
    get:
      security:
        - BearerAuth: [user]
      description: Get all Orders
      parameters:
        - in: path
          name: offset
          required: false
          schema:
            type: string
        - in: path
          name: limit
          required: false
          schema:
            type: string
        - in: path
          name: order_by
          required: false
          schema:
            type: string
        responses:
          '200':
            description: User recieved list of orders
            content:
              application/json:
                schema:
                  type: array
                  items:
                    schema:
                      $ref: "#/components/schemas/Order"
          '403':
            description: User is not authorized to recieve orders
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"
    post:
      security:
        - BearerAuth: [user]
      description: Create new order
      parameters:
        - in: query
          name: order
          required: true
          schema:
            $ref: "#/components/schemas/Order"
