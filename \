from marshmallow import ValidationError
from src.items import bp
from src.items.functions import create_item, get_items
from src.items.schemas import CreateItemSchema
from src.utils.protect_route import protected_route
from flask import request


@bp.route('/items/')
@protected_route
def items():
    if request.method == 'GET':
        offset = request.args.get('offset')
        limit = request.args.get('limit')
        if not offset:
            offset = 0
        if not limit:
            limit = 20
        found_items = get_items(offset, limit)
        json_found_items = [item for item in found_items]
        return {"items": json_found_items, "len": len(json_found_items)}
    else:
        json_data = request.json
        if not json_data:
            return {"err": "You should provide data"}, 400

        schema = CreateItemSchema()
        try:
            result = schema.load(json_data)
        except ValidationError as err:
            print(err)
            return {"err": "data are not valid!"}, 400
        name = result['name'] if 'name' in result else None
        image = result['image'] if 'image' in result else None
        author_id = result['author_id'] if 'author_id' in result else None
        description = result['description'] if 'description' in result else None
        brand = result['brand'] if 'brand' in result else None
        try:
            created_item = create_item(
                name=name,
                image=image,
                author_id=author_id,
                description=description,
                brand=brand
            )
        except Exception as err:
            print('[created_item call]', err)
            return {"err": str(err)}, 400
        print(created_item.json())
        return {"msg": "created!"}
